* What is Git
  
Git is a "revision control system." The motivation for such systems is
that it is very difficult for a group of people to work on a software
project /at the same time/. The original version control systems aimed
to solve this problem with centralized repositories.

Users would have copies of the repository (which contains the
authoritative source code for the project) and a suite of tools which
constitute the version control system would make sure that changes
that were submitted back to the official version of the code were
correct.

These systems also had the benefit of keeping a history of the
project.

* Enter Git

Linux is a Unix-like operating system which is now probably the most
common OS in the world in terms of computer clock cycles. Although
Linux was created by Linus Torvalds, its development is a truly global
collaborative effort. 

Up until ~2005 Linux was developed with BitKeeper, a proprietary
system. Some kernel developers had done a little reverse engineering
of that system and BitKeeper withdrew its free license so, over the
course of several months Torvalds developed git for the purpose of
managing distributed development of Linux.

To this day, it is still the Linux developers who use git at the
highest level and there is much to be admired about their workflow if
not their culture.

* What is Git, though?

Git is a tool which allows to keep a history of your software project
as a series of "checkpoints." It also allows you or another party or
parties to maintain other /versions/ of the software project, in which
case git provides extensive utilities to merge or otherwise combine or
modify multiple different "branches" or "forks" of the software.

* Github?

/Github/ is a website which allows you to /host/ git repositories. In
a very real sense /git/ and /github/ are two entirely distinct
entities. One can easily spend their whole life using git productively
in every way it is intended to be used /without ever using github./

That said, github provides a set of other services (on top of free
non-commercial hosting) that make it an attractive place to back up
and work with your git repositories. We will be using it in this
course.


* Git User Stories

(NB - a user story is a description of the sorts of things you might
do with git).

** Recovering Lost Work

A pothole bounces your laptop out of the window of a bus whereupon it
is run over by a cement truck.

When you get your new laptop you say:

#+begin_src bash

git clone git@github.com:Vincent-Toups/datasci611.git

#+end_src

And you get your code back at the last commit. Because you are
diligent and careful, you commit often and have only lost a day or so
of work.

** Coordinating with Other Developers

You have a data science project on github which analyzes time series
data. An interested researcher in France forks your repository and
notices an improvement can be made to your data cleaning
pipeline. They make a pull request on github. 

You can see exactly what lines of code they change. Some of the
changes are good but one line is problematic. You accept only the
efficacious changes.

** Understanding the Past

After working on your project for several months you run a piece of
code that used to work but which you haven't fiddled with in
awhile. It breaks.

You write a small script to test for the error and git finds the exact
commit (change) that broke the code. Your commit log tells you why you
did it and makes it easy to resolve the problem.

* The Awful Truth

Unfortunately, git is very much a tool which rewards the user only
when they use it at a very high level. That is why we'll have another
chapter on high level git usage. But for now we will satisfy ourselves
with just using git as basic level.

* Why use git at the command line?

I'll be emphasizing using git from the command line. Why? Because in
order to really get the benefits of the system we need to understand
it at a deep level. Using the shell api directly is the best way to do
that.

* How use git at the command line?

On Linuxy systems and on a Mac you should be able to use your package
manager to install git directly.

Predictably, Windows is the real hassle here. On Windows you can
install [[https://gitforwindows.org/][Git For Windows]], [[https://desktop.github.com/][Github Desktop]], [[https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-git][or use git on WSL]]. Git is one
of the few tools we'll primarily be using _outside_ of our Docker
environments, so you should choose one of these and make sure you know
how to get a `git bash` going.

* Git Basics

We create a git repository by going _into_ the folder where we want
the repository to be and saying `git init`.

#+begin_src sh :results code :exports both 
  cd /tmp/
  rm -rf example
  mkdir example
  cd example
  git init --initial-branch main
#+end_src

#+RESULTS:
#+begin_src sh
Initialized empty Git repository in /tmp/example/.git/
#+end_src

Note that all a git repository is is a directory which has a ~.git~
subdirectory. Of course that ~.git~ subdirectory is managed by ~git~
and needs to be specific in its format 

Now we can enter the command which we will probably type most often in
our git lives:

#+begin_src sh :results code :exports both :dir /tmp/example
git status
#+end_src

#+RESULTS:
#+begin_src sh
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)
#+end_src

* A historical note

In older projects you might notice that the most important branch is
often called "master." Given the history of western civilization and
the ongoing impact of historical slavery in people's lives, the
tendency has gradually shifted to using "main" as the most important
branch.

But this also serves as a good seque into the following useful
comment: there is nothing special about the main branch - "main" is
just a name which we apply to a branch to communicate the fact that it
is an important branch. But from git's point of view, there isn't
anything magical about it. A git repository can have many branches
named whatever we'd like. It can, in fact, have multiple branches
totally unrelated to one another, with no history in common.

As we will learn when we discuss git concepts later, a branch is just
a name pointing to a commit and a little bit of logic which tells that
pointer to move forward when new commits are added to the branch.

The ~git status~ invocation we performed above tells us about the
current status of the repository we are in. ~git~ commands work
anywhere beneath the directory 

* What is Version Control (Baby Version)

We've seen how to run git but what does it do?

Simple version: git maintains a history of your codebase as a chain of
"commits."


Let's see what that looks like:

#+begin_src sh :results code :exports both :dir /tmp/example
cat <<EOF > README.md
Example
=======

This is an example readme at the first commit.

EOF

git status
#+end_src

#+RESULTS:
#+begin_src sh
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	README.md

nothing added to commit but untracked files present (use "git add" to track)
#+end_src

(Note - this business with EOF (stands for "End of File") is called a
"here doc" because its a document right here. This is just a "stupid
shell trick" to create a file in a shell script.

Now we will make our first commit.

#+begin_src sh :results code :exports both :dir /tmp/example
  git add README.md # tell git we want README.md to be in the upcomming commit.
  git config --global user.email "toups@email.unc.edu"
  git config --global user.name "Vincent Toups"
  # we only have to do the above once.
  git commit -m "Initial commit."
#+end_src

#+RESULTS:
#+begin_src sh
[main (root-commit) b816b32] Initial commit.
 1 file changed, 5 insertions(+)
 create mode 100644 README.md
#+end_src

And the status:

#+begin_src sh :results code :exports both :dir /tmp/example
git status
#+end_src

#+RESULTS:
#+begin_src sh
On branch main
nothing to commit, working tree clean
#+end_src

And now we can ask git to tell us the history of the project so far:

#+begin_src sh :results code :exports both :dir /tmp/example
git log 
#+end_src

#+RESULTS:
#+begin_src sh
commit b816b326badce21e07a1639c377f7cc60337e946
Author: Vincent Toups <toups@email.unc.edu>
Date:   Mon Aug 23 13:55:31 2021 -0400

    Initial commit.
#+end_src

* Additional Commits

At its most basic level we use git by rinsing and repeating the above
process.

#+begin_src sh :results code :exports both :dir /tmp/example
cat <<EOF > hello.R
print("Hello World.");
EOF
git add hello.R
git commit -m "Initial R source file."
#+end_src

#+RESULTS:
#+begin_src sh
[main 546f135] Initial R source file.
 1 file changed, 1 insertion(+)
 create mode 100644 hello.R
#+end_src

Note that a commit consists of ONLY those changes we tell git to add
to it with `git add`. If you have used subversion (unlikely since this
class is mostly youngsters) this is not how things work. Git doesn't
"track" files. It just records changes which you tell it to record.

Let's modify our README to see what a change to a file that is already
in the repository history looks like.

#+begin_src sh :results code :exports both :dir /tmp/example
cat <<EOF > README.md
Example
=======

This is an example readme.

In addition to editing the line above we've added
some lines for didactic purposes.

EOF

git status
#+end_src

#+RESULTS:
#+begin_src sh
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   README.md

no changes added to commit (use "git add" and/or "git commit -a")
#+end_src

Note that git is telling us that a file is modified but that no
changes are staged for commit.

If we want more details we can ask:

#+begin_src sh :results code :exports both :dir /tmp/example
git diff # read as "git difference"
#+end_src

#+RESULTS:
#+begin_src sh
diff --git a/README.md b/README.md
index 818a9f8..3dbf654 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,8 @@
 Example
 =======
 
-This is an example readme at the first commit.
+This is an example readme.
+
+In addition to editing the line above we've added
+some lines for didactic purposes.
 
#+end_src

The above is a patch. It describes how we need to change the previous
state of the repository to make it match what we have now. Just squint
at it for now, we'll learn to read patches in detail later.

Let's create a new file so we can see hwo things work when there are
multiple changes.

#+begin_src sh :results code :exports both :dir /tmp/example
cat <<EOF > hello.py
print("Hello World.");
EOF
git status
#+end_src

#+RESULTS:
#+begin_src sh
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   README.md

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	hello.py

no changes added to commit (use "git add" and/or "git commit -a")
#+end_src

Now one really nice thing about git is that it really does tell you
how to use it if you just read the output of git status.

#+begin_src sh :results code :exports both :dir /tmp/example

#+end_src
